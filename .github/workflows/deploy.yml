name: Infrastructure Deploy
on:  
  push:
    tags:
       - develop
       - production
  label:
    types:
      - created

jobs:
  generate-vars:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    env:
      AWS_REGION: us-east-1
    outputs:
      AWS_REGION: ${{ steps.vars.outputs.AWS_REGION }}
      ENVIRONMENT: ${{ steps.vars.outputs.ENVIRONMENT }}
      TF_STATE_KEY: ${{ steps.vars.outputs.TF_STATE_KEY }}
      TF_STATE_BUCKET_NAME : ${{ steps.vars.outputs.TF_STATE_BUCKET_NAME }}
      TF_VARS_FILE: ${{ steps.vars.outputs.TF_VARS_FILE }}
    steps:
      - name: Extract Branch Name
        id: branch
        run: echo "BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV

      - name: Create variables
        id: vars
        run: |
          branch=${GITHUB_REF##*/}
          REPO_NAME=${GITHUB_REPOSITORY#*/}
          echo "branch=${branch}" >> $GITHUB_OUTPUT
          echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT

            if [[ ${branch} == 'production' ]];
            then
            ENVIRONMENT=prod
            elif [[ ${branch} == 'dev' || 'OPS-8' ]];
            then
            ENVIRONMENT=dev
            elif
            [[ ${branch} == 'uat' ]];
            then
            ENVIRONMENT=uat
            elif
            [[ ${branch} == 'staging' ]];
            then
            ENVIRONMENT=staging
            fi
          
          AWS_REGION=us-east-1
          TF_STATE_BUCKET_NAME=ibops-cicd-tfstate-${ENVIRONMENT}
          TF_STATE_KEY=${REPO_NAME}/${ENVIRONMENT}/terraform.tfstate
          TF_VARS_FILE=environments/${ENVIRONMENT}/${ENVIRONMENT}.tfvars
          echo "TF_STATE_KEY=${TF_STATE_KEY}" >> $GITHUB_OUTPUT 
          echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_OUTPUT 
          echo "TF_STATE_BUCKET_NAME=${TF_STATE_BUCKET_NAME}" >> $GITHUB_OUTPUT 
          echo "TF_VARS_FILE=${TF_VARS_FILE}" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_OUTPUT

  define_aws_role:
    needs: [generate-vars]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ github.ref_name }}
    outputs:
      AWS_IAM_ROLE: ${{ steps.environment.outputs.AWS_IAM_ROLE }}

    steps:

      - name: Define Environment and set AWS IAM ROLE
        id: environment
        env: 
          ENVIRONMENT: ${{needs.generate-vars.outputs.ENVIRONMENT }}
        run: |
          if [[ (${ENVIRONMENT} = "dev") || (${ENVIRONMENT} = "uat")]];
           then  AWS_IAM_ROLE='arn:aws:iam::766917365927:role/autodeploy'
          elif [[ (${ENVIRONMENT} = "prod") || (${ENVIRONMENT} = "production")]];
            then AWS_IAM_ROLE='arn:aws:iam::815610158045:role/autodeploy'
          fi
          echo "AWS_IAM_ROLE=${AWS_IAM_ROLE}" >> $GITHUB_OUTPUT
          echo $AWS_IAM_ROLE


      
  deploy:
    needs: [generate-vars, define_aws_role]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ github.ref_name }}
    env:
        TF_STATE_BUCKET_NAME: ${{ needs.generate-vars.outputs.TF_STATE_BUCKET_NAME }}
        TF_STATE_KEY: ${{ needs.generate-vars.outputs.TF_STATE_KEY }}
        TF_VARS_FILE: ${{needs.generate-vars.outputs.TF_VARS_FILE }}

    steps:


      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.define_aws_role.outputs.AWS_IAM_ROLE }}
          role-skip-session-tagging: true
          role-session-name: deploy
          aws-region: ${{needs.generate-vars.outputs.AWS_REGION }}
          output-credentials: true


      - name: setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |-
          terraform init -backend-config="bucket=${TF_STATE_BUCKET_NAME}" \
            -backend-config="key=${TF_STATE_KEY}"\
            -backend-config="region=${TF_AWS_REGION}"\
            -backend-config="dynamodb_table=${TF_STATE_BUCKET_NAME}"
        working-directory: ./terraform

      - name: Terraform Validate 
        id: validate
        run: terraform validate 

      - name: Terraform Plan
        id: plan
        run: |-
          terraform plan \
          -var-file="${TF_VARS_FILE}" \
          -out=PLAN
        working-directory: ./terraform

      - name: Terraform Apply
        if: env.APPLY_ENABLED == 'true'
        id: apply
        run: |- 
         terraform apply "PLAN"
        working-directory: ./terraform
        env:
          APPLY_ENABLED: true

      - name: Terraform Output
        id: output
        run: terraform output -json
  

 